APPLY FAMILY

# APPLY FAMILY

vector = c(1,2,3,4,-5)
f <- function(x, return = FALSE){
  if (return){
    2*x
  }
}
# apply a function over each element of a list of vector with LAPPLY, it returns a list
unlist(lapply(vector, f, return = NULL)) # we use unlist to have a vector

# Use anonymous function inside lapply()
lapply(vector, function(x) { 3 * x })

# do the same as lapply but with better visualziation: try to simplify list to array
#sapply returns a vector or matrix (or a list when simplification can be reached)
# with column and row names if there exist
sapply(vector, max)

# with vapply you can choose the output format
# Definition of basics()
basics <- function(x) {
  c(min = min(x), mean = mean(x), max = max(x))
}

# Apply basics() over temp using vapply(): we choose a numeric vector of length 3
vapply(temp, basics, numeric(3))

#------------------------------------------------------------------------------------------------------------------

"
R features a bunch of functions to juggle around with data structures::
  
seq(): Generate sequences, by specifying the from, to, and by arguments.
rep(): Replicate elements of vectors and lists.
sort(): Sort a vector in ascending order. Works on numerics, but also on character strings and logicals.
rev(): Reverse the elements in a data structures for which reversal is defined.
str(): Display the structure of any R object.
append(): Merge vectors or lists.
is.*(): Check for the class of an R object.
as.*(): Convert an R object from one class to another.
unlist(): Flatten (possibly embedded) lists to produce a vector.
"

#------------------------------------------------------------------------------------------------------------------
#REGULAR EXPRESSIONS
#------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------
